
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `View` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model View
 * 
 */
export type ViewModel = runtime.Types.Result.DefaultSelection<Prisma.$ViewPayload>

export type AggregateView = {
  _count: ViewCountAggregateOutputType | null
  _min: ViewMinAggregateOutputType | null
  _max: ViewMaxAggregateOutputType | null
}

export type ViewMinAggregateOutputType = {
  id: string | null
  userAgent: string | null
  referer: string | null
  ipAddress: string | null
  createdAt: Date | null
  userId: string | null
}

export type ViewMaxAggregateOutputType = {
  id: string | null
  userAgent: string | null
  referer: string | null
  ipAddress: string | null
  createdAt: Date | null
  userId: string | null
}

export type ViewCountAggregateOutputType = {
  id: number
  userAgent: number
  referer: number
  ipAddress: number
  createdAt: number
  userId: number
  _all: number
}


export type ViewMinAggregateInputType = {
  id?: true
  userAgent?: true
  referer?: true
  ipAddress?: true
  createdAt?: true
  userId?: true
}

export type ViewMaxAggregateInputType = {
  id?: true
  userAgent?: true
  referer?: true
  ipAddress?: true
  createdAt?: true
  userId?: true
}

export type ViewCountAggregateInputType = {
  id?: true
  userAgent?: true
  referer?: true
  ipAddress?: true
  createdAt?: true
  userId?: true
  _all?: true
}

export type ViewAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which View to aggregate.
   */
  where?: Prisma.ViewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Views to fetch.
   */
  orderBy?: Prisma.ViewOrderByWithRelationInput | Prisma.ViewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ViewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Views from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Views.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Views
  **/
  _count?: true | ViewCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ViewMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ViewMaxAggregateInputType
}

export type GetViewAggregateType<T extends ViewAggregateArgs> = {
      [P in keyof T & keyof AggregateView]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateView[P]>
    : Prisma.GetScalarType<T[P], AggregateView[P]>
}




export type ViewGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ViewWhereInput
  orderBy?: Prisma.ViewOrderByWithAggregationInput | Prisma.ViewOrderByWithAggregationInput[]
  by: Prisma.ViewScalarFieldEnum[] | Prisma.ViewScalarFieldEnum
  having?: Prisma.ViewScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ViewCountAggregateInputType | true
  _min?: ViewMinAggregateInputType
  _max?: ViewMaxAggregateInputType
}

export type ViewGroupByOutputType = {
  id: string
  userAgent: string | null
  referer: string | null
  ipAddress: string | null
  createdAt: Date
  userId: string
  _count: ViewCountAggregateOutputType | null
  _min: ViewMinAggregateOutputType | null
  _max: ViewMaxAggregateOutputType | null
}

type GetViewGroupByPayload<T extends ViewGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ViewGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ViewGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ViewGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ViewGroupByOutputType[P]>
      }
    >
  >



export type ViewWhereInput = {
  AND?: Prisma.ViewWhereInput | Prisma.ViewWhereInput[]
  OR?: Prisma.ViewWhereInput[]
  NOT?: Prisma.ViewWhereInput | Prisma.ViewWhereInput[]
  id?: Prisma.StringFilter<"View"> | string
  userAgent?: Prisma.StringNullableFilter<"View"> | string | null
  referer?: Prisma.StringNullableFilter<"View"> | string | null
  ipAddress?: Prisma.StringNullableFilter<"View"> | string | null
  createdAt?: Prisma.DateTimeFilter<"View"> | Date | string
  userId?: Prisma.StringFilter<"View"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type ViewOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userAgent?: Prisma.SortOrderInput | Prisma.SortOrder
  referer?: Prisma.SortOrderInput | Prisma.SortOrder
  ipAddress?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type ViewWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ViewWhereInput | Prisma.ViewWhereInput[]
  OR?: Prisma.ViewWhereInput[]
  NOT?: Prisma.ViewWhereInput | Prisma.ViewWhereInput[]
  userAgent?: Prisma.StringNullableFilter<"View"> | string | null
  referer?: Prisma.StringNullableFilter<"View"> | string | null
  ipAddress?: Prisma.StringNullableFilter<"View"> | string | null
  createdAt?: Prisma.DateTimeFilter<"View"> | Date | string
  userId?: Prisma.StringFilter<"View"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type ViewOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userAgent?: Prisma.SortOrderInput | Prisma.SortOrder
  referer?: Prisma.SortOrderInput | Prisma.SortOrder
  ipAddress?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  _count?: Prisma.ViewCountOrderByAggregateInput
  _max?: Prisma.ViewMaxOrderByAggregateInput
  _min?: Prisma.ViewMinOrderByAggregateInput
}

export type ViewScalarWhereWithAggregatesInput = {
  AND?: Prisma.ViewScalarWhereWithAggregatesInput | Prisma.ViewScalarWhereWithAggregatesInput[]
  OR?: Prisma.ViewScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ViewScalarWhereWithAggregatesInput | Prisma.ViewScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"View"> | string
  userAgent?: Prisma.StringNullableWithAggregatesFilter<"View"> | string | null
  referer?: Prisma.StringNullableWithAggregatesFilter<"View"> | string | null
  ipAddress?: Prisma.StringNullableWithAggregatesFilter<"View"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"View"> | Date | string
  userId?: Prisma.StringWithAggregatesFilter<"View"> | string
}

export type ViewCreateInput = {
  id?: string
  userAgent?: string | null
  referer?: string | null
  ipAddress?: string | null
  createdAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutViewsInput
}

export type ViewUncheckedCreateInput = {
  id?: string
  userAgent?: string | null
  referer?: string | null
  ipAddress?: string | null
  createdAt?: Date | string
  userId: string
}

export type ViewUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  referer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutViewsNestedInput
}

export type ViewUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  referer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ViewCreateManyInput = {
  id?: string
  userAgent?: string | null
  referer?: string | null
  ipAddress?: string | null
  createdAt?: Date | string
  userId: string
}

export type ViewUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  referer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ViewUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  referer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ViewListRelationFilter = {
  every?: Prisma.ViewWhereInput
  some?: Prisma.ViewWhereInput
  none?: Prisma.ViewWhereInput
}

export type ViewOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ViewCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userAgent?: Prisma.SortOrder
  referer?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type ViewMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userAgent?: Prisma.SortOrder
  referer?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type ViewMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userAgent?: Prisma.SortOrder
  referer?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type ViewCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ViewCreateWithoutUserInput, Prisma.ViewUncheckedCreateWithoutUserInput> | Prisma.ViewCreateWithoutUserInput[] | Prisma.ViewUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ViewCreateOrConnectWithoutUserInput | Prisma.ViewCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ViewCreateManyUserInputEnvelope
  connect?: Prisma.ViewWhereUniqueInput | Prisma.ViewWhereUniqueInput[]
}

export type ViewUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ViewCreateWithoutUserInput, Prisma.ViewUncheckedCreateWithoutUserInput> | Prisma.ViewCreateWithoutUserInput[] | Prisma.ViewUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ViewCreateOrConnectWithoutUserInput | Prisma.ViewCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ViewCreateManyUserInputEnvelope
  connect?: Prisma.ViewWhereUniqueInput | Prisma.ViewWhereUniqueInput[]
}

export type ViewUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ViewCreateWithoutUserInput, Prisma.ViewUncheckedCreateWithoutUserInput> | Prisma.ViewCreateWithoutUserInput[] | Prisma.ViewUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ViewCreateOrConnectWithoutUserInput | Prisma.ViewCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ViewUpsertWithWhereUniqueWithoutUserInput | Prisma.ViewUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ViewCreateManyUserInputEnvelope
  set?: Prisma.ViewWhereUniqueInput | Prisma.ViewWhereUniqueInput[]
  disconnect?: Prisma.ViewWhereUniqueInput | Prisma.ViewWhereUniqueInput[]
  delete?: Prisma.ViewWhereUniqueInput | Prisma.ViewWhereUniqueInput[]
  connect?: Prisma.ViewWhereUniqueInput | Prisma.ViewWhereUniqueInput[]
  update?: Prisma.ViewUpdateWithWhereUniqueWithoutUserInput | Prisma.ViewUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ViewUpdateManyWithWhereWithoutUserInput | Prisma.ViewUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ViewScalarWhereInput | Prisma.ViewScalarWhereInput[]
}

export type ViewUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ViewCreateWithoutUserInput, Prisma.ViewUncheckedCreateWithoutUserInput> | Prisma.ViewCreateWithoutUserInput[] | Prisma.ViewUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ViewCreateOrConnectWithoutUserInput | Prisma.ViewCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ViewUpsertWithWhereUniqueWithoutUserInput | Prisma.ViewUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ViewCreateManyUserInputEnvelope
  set?: Prisma.ViewWhereUniqueInput | Prisma.ViewWhereUniqueInput[]
  disconnect?: Prisma.ViewWhereUniqueInput | Prisma.ViewWhereUniqueInput[]
  delete?: Prisma.ViewWhereUniqueInput | Prisma.ViewWhereUniqueInput[]
  connect?: Prisma.ViewWhereUniqueInput | Prisma.ViewWhereUniqueInput[]
  update?: Prisma.ViewUpdateWithWhereUniqueWithoutUserInput | Prisma.ViewUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ViewUpdateManyWithWhereWithoutUserInput | Prisma.ViewUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ViewScalarWhereInput | Prisma.ViewScalarWhereInput[]
}

export type ViewCreateWithoutUserInput = {
  id?: string
  userAgent?: string | null
  referer?: string | null
  ipAddress?: string | null
  createdAt?: Date | string
}

export type ViewUncheckedCreateWithoutUserInput = {
  id?: string
  userAgent?: string | null
  referer?: string | null
  ipAddress?: string | null
  createdAt?: Date | string
}

export type ViewCreateOrConnectWithoutUserInput = {
  where: Prisma.ViewWhereUniqueInput
  create: Prisma.XOR<Prisma.ViewCreateWithoutUserInput, Prisma.ViewUncheckedCreateWithoutUserInput>
}

export type ViewCreateManyUserInputEnvelope = {
  data: Prisma.ViewCreateManyUserInput | Prisma.ViewCreateManyUserInput[]
}

export type ViewUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ViewWhereUniqueInput
  update: Prisma.XOR<Prisma.ViewUpdateWithoutUserInput, Prisma.ViewUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ViewCreateWithoutUserInput, Prisma.ViewUncheckedCreateWithoutUserInput>
}

export type ViewUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ViewWhereUniqueInput
  data: Prisma.XOR<Prisma.ViewUpdateWithoutUserInput, Prisma.ViewUncheckedUpdateWithoutUserInput>
}

export type ViewUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ViewScalarWhereInput
  data: Prisma.XOR<Prisma.ViewUpdateManyMutationInput, Prisma.ViewUncheckedUpdateManyWithoutUserInput>
}

export type ViewScalarWhereInput = {
  AND?: Prisma.ViewScalarWhereInput | Prisma.ViewScalarWhereInput[]
  OR?: Prisma.ViewScalarWhereInput[]
  NOT?: Prisma.ViewScalarWhereInput | Prisma.ViewScalarWhereInput[]
  id?: Prisma.StringFilter<"View"> | string
  userAgent?: Prisma.StringNullableFilter<"View"> | string | null
  referer?: Prisma.StringNullableFilter<"View"> | string | null
  ipAddress?: Prisma.StringNullableFilter<"View"> | string | null
  createdAt?: Prisma.DateTimeFilter<"View"> | Date | string
  userId?: Prisma.StringFilter<"View"> | string
}

export type ViewCreateManyUserInput = {
  id?: string
  userAgent?: string | null
  referer?: string | null
  ipAddress?: string | null
  createdAt?: Date | string
}

export type ViewUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  referer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ViewUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  referer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ViewUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  referer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ViewSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userAgent?: boolean
  referer?: boolean
  ipAddress?: boolean
  createdAt?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["view"]>

export type ViewSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userAgent?: boolean
  referer?: boolean
  ipAddress?: boolean
  createdAt?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["view"]>

export type ViewSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userAgent?: boolean
  referer?: boolean
  ipAddress?: boolean
  createdAt?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["view"]>

export type ViewSelectScalar = {
  id?: boolean
  userAgent?: boolean
  referer?: boolean
  ipAddress?: boolean
  createdAt?: boolean
  userId?: boolean
}

export type ViewOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userAgent" | "referer" | "ipAddress" | "createdAt" | "userId", ExtArgs["result"]["view"]>
export type ViewInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ViewIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ViewIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ViewPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "View"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userAgent: string | null
    referer: string | null
    ipAddress: string | null
    createdAt: Date
    userId: string
  }, ExtArgs["result"]["view"]>
  composites: {}
}

export type ViewGetPayload<S extends boolean | null | undefined | ViewDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ViewPayload, S>

export type ViewCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ViewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ViewCountAggregateInputType | true
  }

export interface ViewDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['View'], meta: { name: 'View' } }
  /**
   * Find zero or one View that matches the filter.
   * @param {ViewFindUniqueArgs} args - Arguments to find a View
   * @example
   * // Get one View
   * const view = await prisma.view.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ViewFindUniqueArgs>(args: Prisma.SelectSubset<T, ViewFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ViewClient<runtime.Types.Result.GetResult<Prisma.$ViewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one View that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ViewFindUniqueOrThrowArgs} args - Arguments to find a View
   * @example
   * // Get one View
   * const view = await prisma.view.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ViewFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ViewFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ViewClient<runtime.Types.Result.GetResult<Prisma.$ViewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first View that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ViewFindFirstArgs} args - Arguments to find a View
   * @example
   * // Get one View
   * const view = await prisma.view.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ViewFindFirstArgs>(args?: Prisma.SelectSubset<T, ViewFindFirstArgs<ExtArgs>>): Prisma.Prisma__ViewClient<runtime.Types.Result.GetResult<Prisma.$ViewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first View that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ViewFindFirstOrThrowArgs} args - Arguments to find a View
   * @example
   * // Get one View
   * const view = await prisma.view.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ViewFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ViewFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ViewClient<runtime.Types.Result.GetResult<Prisma.$ViewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Views that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ViewFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Views
   * const views = await prisma.view.findMany()
   * 
   * // Get first 10 Views
   * const views = await prisma.view.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const viewWithIdOnly = await prisma.view.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ViewFindManyArgs>(args?: Prisma.SelectSubset<T, ViewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ViewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a View.
   * @param {ViewCreateArgs} args - Arguments to create a View.
   * @example
   * // Create one View
   * const View = await prisma.view.create({
   *   data: {
   *     // ... data to create a View
   *   }
   * })
   * 
   */
  create<T extends ViewCreateArgs>(args: Prisma.SelectSubset<T, ViewCreateArgs<ExtArgs>>): Prisma.Prisma__ViewClient<runtime.Types.Result.GetResult<Prisma.$ViewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Views.
   * @param {ViewCreateManyArgs} args - Arguments to create many Views.
   * @example
   * // Create many Views
   * const view = await prisma.view.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ViewCreateManyArgs>(args?: Prisma.SelectSubset<T, ViewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Views and returns the data saved in the database.
   * @param {ViewCreateManyAndReturnArgs} args - Arguments to create many Views.
   * @example
   * // Create many Views
   * const view = await prisma.view.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Views and only return the `id`
   * const viewWithIdOnly = await prisma.view.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ViewCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ViewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ViewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a View.
   * @param {ViewDeleteArgs} args - Arguments to delete one View.
   * @example
   * // Delete one View
   * const View = await prisma.view.delete({
   *   where: {
   *     // ... filter to delete one View
   *   }
   * })
   * 
   */
  delete<T extends ViewDeleteArgs>(args: Prisma.SelectSubset<T, ViewDeleteArgs<ExtArgs>>): Prisma.Prisma__ViewClient<runtime.Types.Result.GetResult<Prisma.$ViewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one View.
   * @param {ViewUpdateArgs} args - Arguments to update one View.
   * @example
   * // Update one View
   * const view = await prisma.view.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ViewUpdateArgs>(args: Prisma.SelectSubset<T, ViewUpdateArgs<ExtArgs>>): Prisma.Prisma__ViewClient<runtime.Types.Result.GetResult<Prisma.$ViewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Views.
   * @param {ViewDeleteManyArgs} args - Arguments to filter Views to delete.
   * @example
   * // Delete a few Views
   * const { count } = await prisma.view.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ViewDeleteManyArgs>(args?: Prisma.SelectSubset<T, ViewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Views.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ViewUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Views
   * const view = await prisma.view.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ViewUpdateManyArgs>(args: Prisma.SelectSubset<T, ViewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Views and returns the data updated in the database.
   * @param {ViewUpdateManyAndReturnArgs} args - Arguments to update many Views.
   * @example
   * // Update many Views
   * const view = await prisma.view.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Views and only return the `id`
   * const viewWithIdOnly = await prisma.view.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ViewUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ViewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ViewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one View.
   * @param {ViewUpsertArgs} args - Arguments to update or create a View.
   * @example
   * // Update or create a View
   * const view = await prisma.view.upsert({
   *   create: {
   *     // ... data to create a View
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the View we want to update
   *   }
   * })
   */
  upsert<T extends ViewUpsertArgs>(args: Prisma.SelectSubset<T, ViewUpsertArgs<ExtArgs>>): Prisma.Prisma__ViewClient<runtime.Types.Result.GetResult<Prisma.$ViewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Views.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ViewCountArgs} args - Arguments to filter Views to count.
   * @example
   * // Count the number of Views
   * const count = await prisma.view.count({
   *   where: {
   *     // ... the filter for the Views we want to count
   *   }
   * })
  **/
  count<T extends ViewCountArgs>(
    args?: Prisma.Subset<T, ViewCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ViewCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a View.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ViewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ViewAggregateArgs>(args: Prisma.Subset<T, ViewAggregateArgs>): Prisma.PrismaPromise<GetViewAggregateType<T>>

  /**
   * Group by View.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ViewGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ViewGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ViewGroupByArgs['orderBy'] }
      : { orderBy?: ViewGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ViewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetViewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the View model
 */
readonly fields: ViewFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for View.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ViewClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the View model
 */
export interface ViewFieldRefs {
  readonly id: Prisma.FieldRef<"View", 'String'>
  readonly userAgent: Prisma.FieldRef<"View", 'String'>
  readonly referer: Prisma.FieldRef<"View", 'String'>
  readonly ipAddress: Prisma.FieldRef<"View", 'String'>
  readonly createdAt: Prisma.FieldRef<"View", 'DateTime'>
  readonly userId: Prisma.FieldRef<"View", 'String'>
}
    

// Custom InputTypes
/**
 * View findUnique
 */
export type ViewFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the View
   */
  select?: Prisma.ViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the View
   */
  omit?: Prisma.ViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ViewInclude<ExtArgs> | null
  /**
   * Filter, which View to fetch.
   */
  where: Prisma.ViewWhereUniqueInput
}

/**
 * View findUniqueOrThrow
 */
export type ViewFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the View
   */
  select?: Prisma.ViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the View
   */
  omit?: Prisma.ViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ViewInclude<ExtArgs> | null
  /**
   * Filter, which View to fetch.
   */
  where: Prisma.ViewWhereUniqueInput
}

/**
 * View findFirst
 */
export type ViewFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the View
   */
  select?: Prisma.ViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the View
   */
  omit?: Prisma.ViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ViewInclude<ExtArgs> | null
  /**
   * Filter, which View to fetch.
   */
  where?: Prisma.ViewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Views to fetch.
   */
  orderBy?: Prisma.ViewOrderByWithRelationInput | Prisma.ViewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Views.
   */
  cursor?: Prisma.ViewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Views from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Views.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Views.
   */
  distinct?: Prisma.ViewScalarFieldEnum | Prisma.ViewScalarFieldEnum[]
}

/**
 * View findFirstOrThrow
 */
export type ViewFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the View
   */
  select?: Prisma.ViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the View
   */
  omit?: Prisma.ViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ViewInclude<ExtArgs> | null
  /**
   * Filter, which View to fetch.
   */
  where?: Prisma.ViewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Views to fetch.
   */
  orderBy?: Prisma.ViewOrderByWithRelationInput | Prisma.ViewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Views.
   */
  cursor?: Prisma.ViewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Views from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Views.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Views.
   */
  distinct?: Prisma.ViewScalarFieldEnum | Prisma.ViewScalarFieldEnum[]
}

/**
 * View findMany
 */
export type ViewFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the View
   */
  select?: Prisma.ViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the View
   */
  omit?: Prisma.ViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ViewInclude<ExtArgs> | null
  /**
   * Filter, which Views to fetch.
   */
  where?: Prisma.ViewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Views to fetch.
   */
  orderBy?: Prisma.ViewOrderByWithRelationInput | Prisma.ViewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Views.
   */
  cursor?: Prisma.ViewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Views from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Views.
   */
  skip?: number
  distinct?: Prisma.ViewScalarFieldEnum | Prisma.ViewScalarFieldEnum[]
}

/**
 * View create
 */
export type ViewCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the View
   */
  select?: Prisma.ViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the View
   */
  omit?: Prisma.ViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ViewInclude<ExtArgs> | null
  /**
   * The data needed to create a View.
   */
  data: Prisma.XOR<Prisma.ViewCreateInput, Prisma.ViewUncheckedCreateInput>
}

/**
 * View createMany
 */
export type ViewCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Views.
   */
  data: Prisma.ViewCreateManyInput | Prisma.ViewCreateManyInput[]
}

/**
 * View createManyAndReturn
 */
export type ViewCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the View
   */
  select?: Prisma.ViewSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the View
   */
  omit?: Prisma.ViewOmit<ExtArgs> | null
  /**
   * The data used to create many Views.
   */
  data: Prisma.ViewCreateManyInput | Prisma.ViewCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ViewIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * View update
 */
export type ViewUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the View
   */
  select?: Prisma.ViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the View
   */
  omit?: Prisma.ViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ViewInclude<ExtArgs> | null
  /**
   * The data needed to update a View.
   */
  data: Prisma.XOR<Prisma.ViewUpdateInput, Prisma.ViewUncheckedUpdateInput>
  /**
   * Choose, which View to update.
   */
  where: Prisma.ViewWhereUniqueInput
}

/**
 * View updateMany
 */
export type ViewUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Views.
   */
  data: Prisma.XOR<Prisma.ViewUpdateManyMutationInput, Prisma.ViewUncheckedUpdateManyInput>
  /**
   * Filter which Views to update
   */
  where?: Prisma.ViewWhereInput
  /**
   * Limit how many Views to update.
   */
  limit?: number
}

/**
 * View updateManyAndReturn
 */
export type ViewUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the View
   */
  select?: Prisma.ViewSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the View
   */
  omit?: Prisma.ViewOmit<ExtArgs> | null
  /**
   * The data used to update Views.
   */
  data: Prisma.XOR<Prisma.ViewUpdateManyMutationInput, Prisma.ViewUncheckedUpdateManyInput>
  /**
   * Filter which Views to update
   */
  where?: Prisma.ViewWhereInput
  /**
   * Limit how many Views to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ViewIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * View upsert
 */
export type ViewUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the View
   */
  select?: Prisma.ViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the View
   */
  omit?: Prisma.ViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ViewInclude<ExtArgs> | null
  /**
   * The filter to search for the View to update in case it exists.
   */
  where: Prisma.ViewWhereUniqueInput
  /**
   * In case the View found by the `where` argument doesn't exist, create a new View with this data.
   */
  create: Prisma.XOR<Prisma.ViewCreateInput, Prisma.ViewUncheckedCreateInput>
  /**
   * In case the View was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ViewUpdateInput, Prisma.ViewUncheckedUpdateInput>
}

/**
 * View delete
 */
export type ViewDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the View
   */
  select?: Prisma.ViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the View
   */
  omit?: Prisma.ViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ViewInclude<ExtArgs> | null
  /**
   * Filter which View to delete.
   */
  where: Prisma.ViewWhereUniqueInput
}

/**
 * View deleteMany
 */
export type ViewDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Views to delete
   */
  where?: Prisma.ViewWhereInput
  /**
   * Limit how many Views to delete.
   */
  limit?: number
}

/**
 * View without action
 */
export type ViewDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the View
   */
  select?: Prisma.ViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the View
   */
  omit?: Prisma.ViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ViewInclude<ExtArgs> | null
}
